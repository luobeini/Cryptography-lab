import tkinter as tk
from tkinter import messagebox
from Crypto.Util.Padding import pad
# Constants and helper functions for SM4 encryption
FK = [0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc]
S_BOX = [0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05,
         0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
         0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF, 0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62,
         0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6,
         0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8,
         0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35,
         0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87,
         0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E,
         0xEA, 0xBF, 0x8A, 0xD2, 0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1,
         0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3,
         0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F,
         0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51,
         0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8,
         0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0,
         0x89, 0x69, 0x97, 0x4A, 0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84,
         0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48
         ]
CK = [
    0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
    0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
    0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
    0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
    0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
    0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
    0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
    0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279
]

# Helper Functions
def left(wd, bit):
    return (wd << bit & 0xffffffff) | (wd >> (32 - bit))

def search_s(wd):
    ret = []
    for i in range(0, 4):
        byte = (wd >> (32 - (i + 1) * 8)) & 0xff
        row = byte >> 4
        col = byte & 0x0f
        index = (row * 16 + col)
        ret.append(S_BOX[index])
    return sum([ret[i] << (24 - 8 * i) for i in range(4)])

def T(x1, x2, x3, rk):
    a = x1 ^ x2 ^ x3 ^ rk
    b = search_s(a)
    return b ^ left(b, 2) ^ left(b, 10) ^ left(b, 18) ^ left(b, 24)

def extend(mk):
    MK = [(mk >> (128 - (i + 1) * 32)) & 0xffffffff for i in range(4)]
    K = [MK[i] ^ FK[i] for i in range(4)]
    rk = []
    for i in range(32):
        a = T(K[i + 1], K[i + 2], K[i + 3], CK[i])
        K.append(K[i] ^ a)
        rk.append(K[i] ^ a)
    return rk

def encode(x, rk):
    X = [(x >> (128 - (i + 1) * 32)) & 0xffffffff for i in range(4)]
    for i in range(32):
        c = T(X[1], X[2], X[3], rk[i]) ^ X[0]
        X = X[1:] + [c]
    return ''.join([f"{X[3 - i]:08x}" for i in range(4)])

def decode(ciphertext, rk):
    ciphertext = int(ciphertext, 16)
    X = [(ciphertext >> (128 - (i + 1) * 32)) & 0xffffffff for i in range(4)]
    for i in range(32):
        t = T(X[1], X[2], X[3], rk[31 - i])
        X = X[1:] + [t ^ X[0]]
    return ''.join([f"{X[3 - i]:08x}" for i in range(4)])

# Main Function
if __name__ == "__main__":
    plaintext = input("请输入明文（16进制）：")
    key = input("请输入密钥（16进制）：")

    try:
        plaintext = int(plaintext, 16)
        key = int(key, 16)
    except ValueError:
        print("输入的明文或密钥不是有效的16进制格式！")
        exit()

    # 密钥扩展
    rk = extend(key)

    # 加密
    ciphertext = encode(plaintext, rk)
    print(f"加密后的密文：{ciphertext}")

    # 解密
    decrypted_plaintext = decode(ciphertext, rk)
    print(f"解密后的明文：{decrypted_plaintext}")



    




    
   
    


    
